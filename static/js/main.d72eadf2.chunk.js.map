{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getFilm","a","fetch","film","json","FindMovie","addMovie","useState","query","setQuery","newFilm","setNewFilm","error","setError","shouldRenderPreview","setShouldRenderPreview","addingError","setAddingError","searchFilm","request","Response","Title","Plot","Poster","imdbID","htmlFor","type","id","placeholder","value","onChange","event","target","onClick","some","Object","keys","length","App","data","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d72eadf2.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com';\n\nexport const getFilm = async(title) => {\n  const film = await fetch(`${BASE_URL}/?apikey=21a609de&t=${title}`);\n\n  return film.json();\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\nimport { getFilm } from '../../api/api';\n\nexport const FindMovie = ({ movies, addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [newFilm, setNewFilm] = useState({});\n  const [error, setError] = useState(false);\n  const [shouldRenderPreview, setShouldRenderPreview] = useState(false);\n  const [addingError, setAddingError] = useState(false);\n\n  const handleChange = (event) => {\n    setQuery(event.target.value);\n    setError(false);\n    setNewFilm({});\n    setShouldRenderPreview(false);\n  };\n\n  const searchFilm = async() => {\n    const request = await getFilm(query);\n\n    if (request.Response === 'True') {\n      setNewFilm({\n        title: request.Title,\n        description: request.Plot,\n        imgUrl: request.Poster,\n        imdbUrl: `https://www.imdb.com/title/${request.imdbID}/`,\n        imdbId: request.imdbID,\n      });\n      setError(false);\n      setShouldRenderPreview(true);\n      setAddingError(false);\n    } else {\n      setError(true);\n      setShouldRenderPreview(false);\n      setNewFilm({});\n    }\n  };\n\n  const handleFind = () => {\n    searchFilm(query);\n  };\n\n  const handleAdd = () => {\n    if (movies.some(movie => movie.imdbId === newFilm.imdbId)) {\n      setAddingError(true);\n    } else if (query && Object.keys(newFilm).length !== 0) {\n      addMovie(newFilm);\n      setShouldRenderPreview(false);\n      setAddingError(false);\n      setQuery('');\n      setNewFilm({});\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={`input ${error ? 'is-danger' : ''}`}\n              value={query}\n              onChange={handleChange}\n            />\n          </div>\n\n          {error\n          && (\n            <>\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            </>\n          )\n          }\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={handleFind}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={handleAdd}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {addingError\n          && (\n            <>\n              <p className=\"help is-danger\">\n                This movie already added\n              </p>\n            </>\n          )\n      }\n\n      {shouldRenderPreview && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...newFilm} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([...data]);\n  const addMovie = (movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}